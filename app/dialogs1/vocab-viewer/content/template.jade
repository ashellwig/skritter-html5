gelato-component(data-name='vocab-viewer-content')

  if view.vocabs && view.vocabs.length
    - var items = view.items;
    - var vocab = view.vocabs.at(0);
    - var containingVocabs = view.getContainingCharacters();
    - var containingWords = view.getContainingWords();
    - var definition = vocab.getDefinition();
    - var mnemonic = vocab.getMnemonic();
    - var sentence = vocab.getSentence();

    #header-section
      .block.separator
        #vocab-writing(class=vocab.getFontClass())= vocab.get('writing')
        #vocab-reading= vocab.getReading()
      .block
        #vocab-difficulty= vocab.get('toughnessString')
        #vocab-difficulty-text LEVEL
      .pull-right
        a(href='#', data-dismiss='modal')
          i.fa.fa-times-circle-o

    #content-section
      #panel-left
        .block
          .header Definition
          .value
            #vocab-definition
              if definition
                span!= definition
        .block
          .header Sentence
          .value
            #vocab-sentence
              if sentence
                span(class=vocab.getFontClass())!= sentence.getWriting()
        .block
          .header Mnemonic
          .value
            #vocab-mnemonic
              if mnemonic
                span!= app.fn.textToHTML(mnemonic.text)
        .block
          .header Dictionary
          .value
            #lookup-container
        .block
          table.table
            thead
              tr
                th Part
                th Next
                th Last
                th Time
                th
            tbody
              for item in items
                tr.item-row(data-id=item.id, data-part=item.part)
                 //TODO: move this logic to the item model
                 td= _.capitalize(item.part)
                 td= item.next > moment().unix() ? moment(item.next * 1000).from() : 'Ready'
                 td= item.last ? moment(item.last * 1000).from() : '-'
                 td= item.timeStudied ? Math.round(item.timeStudied) + ' seconds' : '-'
                 if _.includes(vocab.get('bannedParts'), item.part)
                  td.item-unban
                   button.btn.btn-xs.btn-default Unban
                 else
                  td.item-ban
                    button.btn.btn-xs.btn-danger Ban
      #panel-right
        if containingWords.length > 1
          .block
            .header Words containing #{vocab.get('writing')}
            .value
              #vocab-words-containing
                for model in containingWords
                  div
                    span.spr.writing(class=model.getFontClass())= model.get('writing')
                    span.spr.reading= model.getReading()
                    span.spr :
                    span.definition= model.getDefinition()
        if containingVocabs.length > 1
          .block
            .header Characters contained #{vocab.get('writing')}
            .value
              #vocab-characters-contained
                for model in containingVocabs
                  if model.get('writing') != vocab.get('writing')
                    div
                      span.spr.writing(class=vocab.getFontClass())= model.get('writing')
                      span.spr.reading= model.getReading()
                      span.spr :
                      span.definition= model.getDefinition()
